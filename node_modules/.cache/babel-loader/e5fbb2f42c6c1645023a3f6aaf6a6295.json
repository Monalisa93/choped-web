{"ast":null,"code":"var _jsxFileName = \"/Users/monalisadebnth/Downloads/choped-sm-react/src/components/Signin/Signin.js\";\nimport React, { Component } from \"react\";\nimport { Form, Icon, Input, Button, Spin, Alert } from \"antd\";\nimport { withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as errorMessages from \"../../utils/errorMessages\";\nimport SendResetEmail from \"../ResetPassword/SendResetEmail/SendResetEmail\";\nimport * as actions from \"../../store/actions\";\nimport \"./Signin.css\";\n\nclass Signin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isVisible: false\n    };\n\n    this.toggleModalHandler = () => {\n      const modalVisibility = this.state.isVisible;\n      this.props.onDismissError();\n      this.setState({\n        isVisible: !modalVisibility\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          values = _this$props.values,\n          handleSubmit = _this$props.handleSubmit,\n          handleChange = _this$props.handleChange,\n          handleBlur = _this$props.handleBlur,\n          errors = _this$props.errors,\n          error = _this$props.error,\n          loading = _this$props.loading,\n          touched = _this$props.touched,\n          isAuthenticated = _this$props.isAuthenticated; //reset password modal\n\n    const isVisible = this.state.isVisible;\n    let resetPasswordModal = null;\n    if (isVisible) resetPasswordModal = React.createElement(SendResetEmail, {\n      isVisible: isVisible,\n      toggleModal: this.toggleModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }); //Check if user is auth then redirect\n\n    let authRedirect = null;\n    if (isAuthenticated) authRedirect = React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }); //loagind icon when logging in\n\n    const antIcon = React.createElement(Icon, {\n      type: \"loading\",\n      style: {\n        fontSize: 24\n      },\n      spin: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }); //login errors\n\n    let formErrors = null;\n    if (error) formErrors = React.createElement(Alert, {\n      message: error.message,\n      type: \"error\",\n      showIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n    return React.createElement(\"form\", {\n      className: \"Signin\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, resetPasswordModal, authRedirect, React.createElement(\"div\", {\n      className: \"Signin_Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Spin, {\n      spinning: loading,\n      indicator: antIcon,\n      className: \"Spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"Form_Header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Sign In\"), formErrors, React.createElement(Form.Item, {\n      help: touched.email && errors.email ? errors.email : \"\",\n      validateStatus: touched.email && errors.email ? \"error\" : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      type: \"email\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      help: touched.password && errors.password ? errors.password : \"\",\n      validateStatus: touched.password && errors.password ? \"error\" : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      placeholder: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"login-form-forgot resetLink\",\n      onClick: this.toggleModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Forgot Password?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Log in\")))));\n  }\n\n} //auth validation schema\n\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().min(3, errorMessages.emailNotLongEnough).max(255).email(errorMessages.invalidEmail).required(),\n  password: yup.string().min(3, errorMessages.passwordNotLongEnough).max(255).required()\n}); //mapping state to props\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null\n  };\n}; //mapping actions to props\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: ({\n      email,\n      password\n    }) => dispatch(actions.auth(email, password)),\n    onDismissError: () => dispatch(actions.dismissError())\n  };\n}; //handling form submit\n\n\nconst signinHandler = (formValues, props) => {\n  props.onAuth(formValues);\n}; //export component\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withFormik({\n  validationSchema,\n  mapPropsToValues: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n  handleSubmit: async (values, {\n    props,\n    setErrors,\n    setSubmitting\n  }) => {\n    const errors = await signinHandler(values, props);\n    if (errors) setErrors(errors);\n  }\n})(Signin));","map":{"version":3,"sources":["/Users/monalisadebnth/Downloads/choped-sm-react/src/components/Signin/Signin.js"],"names":["React","Component","Form","Icon","Input","Button","Spin","Alert","withFormik","yup","connect","Redirect","errorMessages","SendResetEmail","actions","Signin","state","isVisible","toggleModalHandler","modalVisibility","props","onDismissError","setState","render","values","handleSubmit","handleChange","handleBlur","errors","error","loading","touched","isAuthenticated","resetPasswordModal","authRedirect","antIcon","fontSize","formErrors","message","email","undefined","color","password","validationSchema","object","shape","string","min","emailNotLongEnough","max","invalidEmail","required","passwordNotLongEnough","mapStateToProps","auth","token","mapDispatchToProps","dispatch","onAuth","dismissError","signinHandler","formValues","mapPropsToValues","setErrors","setSubmitting"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form, Icon, Input, Button, Spin, Alert } from \"antd\";\r\nimport { withFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport * as errorMessages from \"../../utils/errorMessages\";\r\nimport SendResetEmail from \"../ResetPassword/SendResetEmail/SendResetEmail\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nimport \"./Signin.css\";\r\n\r\nclass Signin extends Component {\r\n  state = { isVisible: false };\r\n  toggleModalHandler = () => {\r\n    const modalVisibility = this.state.isVisible;\r\n    this.props.onDismissError();\r\n    this.setState({ isVisible: !modalVisibility });\r\n  };\r\n  render() {\r\n    const {\r\n      values,\r\n      handleSubmit,\r\n      handleChange,\r\n      handleBlur,\r\n      errors,\r\n      error,\r\n      loading,\r\n      touched,\r\n      isAuthenticated\r\n    } = this.props;\r\n\r\n    //reset password modal\r\n    const isVisible = this.state.isVisible;\r\n    let resetPasswordModal = null;\r\n    if (isVisible)\r\n      resetPasswordModal = (\r\n        <SendResetEmail\r\n          isVisible={isVisible}\r\n          toggleModal={this.toggleModalHandler}\r\n        />\r\n      );\r\n\r\n    //Check if user is auth then redirect\r\n    let authRedirect = null;\r\n    if (isAuthenticated) authRedirect = <Redirect to=\"/dashboard\" />;\r\n\r\n    //loagind icon when logging in\r\n    const antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\n    //login errors\r\n    let formErrors = null;\r\n    if (error)\r\n      formErrors = <Alert message={error.message} type=\"error\" showIcon />;\r\n\r\n    return (\r\n      <form className=\"Signin\" onSubmit={handleSubmit}>\r\n        {resetPasswordModal}\r\n        {authRedirect}\r\n        <div className=\"Signin_Form\">\r\n          <Spin spinning={loading} indicator={antIcon} className=\"Spinner\">\r\n            <h3 className=\"Form_Header\">Sign In</h3>\r\n            {formErrors}\r\n            <Form.Item\r\n              help={touched.email && errors.email ? errors.email : \"\"}\r\n              validateStatus={\r\n                touched.email && errors.email ? \"error\" : undefined\r\n              }\r\n            >\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                placeholder=\"Email\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              help={touched.password && errors.password ? errors.password : \"\"}\r\n              validateStatus={\r\n                touched.password && errors.password ? \"error\" : undefined\r\n              }\r\n            >\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.password}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <span className=\"login-form-forgot resetLink\" onClick={this.toggleModalHandler}>\r\n                Forgot Password?\r\n              </span>\r\n              <br />\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Log in\r\n              </Button>\r\n            </Form.Item>\r\n          </Spin>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//auth validation schema\r\nconst validationSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .min(3, errorMessages.emailNotLongEnough)\r\n    .max(255)\r\n    .email(errorMessages.invalidEmail)\r\n    .required(),\r\n  password: yup\r\n    .string()\r\n    .min(3, errorMessages.passwordNotLongEnough)\r\n    .max(255)\r\n    .required()\r\n});\r\n\r\n//mapping state to props\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null\r\n  };\r\n};\r\n\r\n//mapping actions to props\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: ({ email, password }) => dispatch(actions.auth(email, password)),\r\n    onDismissError: () => dispatch(actions.dismissError())\r\n  };\r\n};\r\n\r\n//handling form submit\r\nconst signinHandler = (formValues, props) => {\r\n  props.onAuth(formValues);\r\n};\r\n\r\n//export component\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  withFormik({\r\n    validationSchema,\r\n    mapPropsToValues: () => ({\r\n      email: \"\",\r\n      password: \"\"\r\n    }),\r\n    handleSubmit: async (values, { props, setErrors, setSubmitting }) => {\r\n      const errors = await signinHandler(values, props);\r\n      if (errors) setErrors(errors);\r\n    }\r\n  })(Signin)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}