{"ast":null,"code":"var _jsxFileName = \"/Users/monalisadebnth/Downloads/choped-sm-react/src/components/ResetPassword/SendResetEmail/SendResetEmail.js\";\nimport React, { Component } from \"react\";\nimport { Form, Icon, Input, Spin, Alert } from \"antd\";\nimport { withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport * as errorMessages from \"../../../utils/errorMessages\";\nimport * as actions from \"../../../store/actions\";\nimport Modal from \"../../UI/Modal/Modal\";\nexport class SendResetEmail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: \"Send reset password link\"\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          values = _this$props.values,\n          handleSubmit = _this$props.handleSubmit,\n          handleChange = _this$props.handleChange,\n          handleBlur = _this$props.handleBlur,\n          errors = _this$props.errors,\n          loading = _this$props.loading,\n          touched = _this$props.touched,\n          isVisible = _this$props.isVisible,\n          toggleModal = _this$props.toggleModal,\n          error = _this$props.error,\n          message = _this$props.message; //login errors\n\n    let formErrors = null;\n    if (error) formErrors = React.createElement(Alert, {\n      message: error.message,\n      type: \"error\",\n      showIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n    if (message) formErrors = React.createElement(Alert, {\n      message: message,\n      type: \"success\",\n      showIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      title: this.state.title,\n      visible: isVisible,\n      handleSubmit: handleSubmit,\n      handleCancel: toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"ResetPassword\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Confirm_New_Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Spin, {\n      spinning: loading,\n      className: \"Spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, formErrors, React.createElement(Form.Item, {\n      help: touched.email && errors.email ? errors.email : \"\",\n      validateStatus: touched.email && errors.email ? \"error\" : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      type: \"email\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })))))));\n  }\n\n} //email validation schema\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().min(3, errorMessages.emailNotLongEnough).max(255).email(errorMessages.invalidEmail).required()\n}); //mapping state to props\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    message: state.auth.message\n  };\n}; //mapping actions to props\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSendResetPasswordEmail: email => dispatch(actions.sendResetPasswordEmail(email))\n  };\n}; //handling form submit\n\n\nconst resetPasswordHandler = (formValues, props) => {\n  props.onSendResetPasswordEmail(formValues);\n}; //export component\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withFormik({\n  validationSchema,\n  mapPropsToValues: () => ({\n    email: \"\"\n  }),\n  handleSubmit: async (values, {\n    props,\n    setErrors\n  }) => {\n    const errors = await resetPasswordHandler(values, props);\n    if (errors) setErrors(errors);\n  }\n})(SendResetEmail));","map":{"version":3,"sources":["/Users/monalisadebnth/Downloads/choped-sm-react/src/components/ResetPassword/SendResetEmail/SendResetEmail.js"],"names":["React","Component","Form","Icon","Input","Spin","Alert","withFormik","yup","connect","errorMessages","actions","Modal","SendResetEmail","state","title","render","props","values","handleSubmit","handleChange","handleBlur","errors","loading","touched","isVisible","toggleModal","error","message","formErrors","email","undefined","color","validationSchema","object","shape","string","min","emailNotLongEnough","max","invalidEmail","required","mapStateToProps","auth","mapDispatchToProps","dispatch","onSendResetPasswordEmail","sendResetPasswordEmail","resetPasswordHandler","formValues","mapPropsToValues","setErrors"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form, Icon, Input, Spin, Alert } from \"antd\";\r\nimport { withFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as errorMessages from \"../../../utils/errorMessages\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport Modal from \"../../UI/Modal/Modal\";\r\n\r\nexport class SendResetEmail extends Component {\r\n  state = {\r\n    title: \"Send reset password link\"\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      values,\r\n      handleSubmit,\r\n      handleChange,\r\n      handleBlur,\r\n      errors,\r\n      loading,\r\n      touched,\r\n      isVisible,\r\n      toggleModal,\r\n      error,\r\n      message\r\n    } = this.props;\r\n\r\n    //login errors\r\n    let formErrors = null;\r\n    if (error)\r\n      formErrors = <Alert message={error.message} type=\"error\" showIcon />;\r\n    if (message)\r\n      formErrors = <Alert message={message} type=\"success\" showIcon />;\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title={this.state.title}\r\n          visible={isVisible}\r\n          handleSubmit={handleSubmit}\r\n          handleCancel={toggleModal}\r\n        >\r\n          <form className=\"ResetPassword\" onSubmit={handleSubmit}>\r\n            <div className=\"Confirm_New_Password\">\r\n              <Spin spinning={loading} className=\"Spinner\">\r\n                {formErrors}\r\n                <Form.Item\r\n                  help={touched.email && errors.email ? errors.email : \"\"}\r\n                  validateStatus={\r\n                    touched.email && errors.email ? \"error\" : undefined\r\n                  }\r\n                >\r\n                  <Input\r\n                    prefix={\r\n                      <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                    }\r\n                    placeholder=\"Email\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                  />\r\n                </Form.Item>\r\n              </Spin>\r\n            </div>\r\n          </form>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//email validation schema\r\nconst validationSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .min(3, errorMessages.emailNotLongEnough)\r\n    .max(255)\r\n    .email(errorMessages.invalidEmail)\r\n    .required()\r\n});\r\n\r\n//mapping state to props\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    message: state.auth.message\r\n  };\r\n};\r\n\r\n//mapping actions to props\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSendResetPasswordEmail: email =>      dispatch(actions.sendResetPasswordEmail(email))\r\n  };\r\n};\r\n\r\n//handling form submit\r\nconst resetPasswordHandler = (formValues, props) => {\r\n  props.onSendResetPasswordEmail(formValues);\r\n};\r\n\r\n//export component\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  withFormik({\r\n    validationSchema,\r\n    mapPropsToValues: () => ({\r\n      email: \"\"\r\n    }),\r\n    handleSubmit: async (values, { props, setErrors }) => {\r\n      const errors = await resetPasswordHandler(values, props);\r\n      if (errors) setErrors(errors);\r\n    }\r\n  })(SendResetEmail)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}