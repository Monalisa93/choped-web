{"ast":null,"code":"var _jsxFileName = \"/Users/monalisadebnth/Downloads/choped-sm-react/src/components/ResetPassword/ResetPassword.js\";\nimport React, { Component } from \"react\";\nimport { Form, Icon, Input, Spin, Button, Alert } from \"antd\";\nimport { withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport queryString from \"query-string\";\nimport * as errorMessages from \"../../utils/errorMessages\";\nimport * as actions from \"../../store/actions\";\nimport \"./ResetPassword.css\";\nexport class ResetPassword extends Component {\n  componentDidMount() {\n    this.props.onSetOobCode(queryString.parse(this.props.location.search).oobCode);\n  }\n\n  render() {\n    const _this$props = this.props,\n          values = _this$props.values,\n          handleSubmit = _this$props.handleSubmit,\n          handleChange = _this$props.handleChange,\n          handleBlur = _this$props.handleBlur,\n          errors = _this$props.errors,\n          loading = _this$props.loading,\n          touched = _this$props.touched,\n          message = _this$props.message,\n          error = _this$props.error; //login errors\n\n    let formInfos = null;\n    if (error) formInfos = React.createElement(Alert, {\n      message: error.message,\n      type: \"error\",\n      showIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n    if (message) formInfos = React.createElement(Alert, {\n      message: message,\n      type: \"success\",\n      showIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n    return React.createElement(\"form\", {\n      className: \"ResetPassword\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ResetPassword_Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Spin, {\n      spinning: loading,\n      className: \"Spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"Form_Header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Enter New Password\"), formInfos, React.createElement(Form.Item, {\n      help: touched.password && errors.password ? errors.password : \"\",\n      validateStatus: touched.password && errors.password ? \"error\" : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }),\n      placeholder: \"New Password\",\n      type: \"password\",\n      name: \"password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Confirm\")))));\n  }\n\n} //Password validation schema\n\nconst validationSchema = yup.object().shape({\n  password: yup.string().min(6, errorMessages.passwordNotLongEnough).max(255).required()\n}); //mapping state to props\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    oobCode: state.auth.oobCode,\n    message: state.auth.message,\n    error: state.auth.error\n  };\n}; //mapping actions to props\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetOobCode: oobCode => {\n      dispatch(actions.setOobCode(oobCode));\n    },\n    onConfirmResetPassword: (password, oobCode) => dispatch(actions.resetPassword(password, oobCode))\n  };\n}; //handling form submit\n\n\nconst confirmResetPasswordHandler = (formValues, props) => {\n  props.onConfirmResetPassword(formValues, props.oobCode);\n}; //export component\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withFormik({\n  validationSchema,\n  mapPropsToValues: () => ({\n    password: \"\"\n  }),\n  handleSubmit: async (values, {\n    props,\n    setErrors\n  }) => {\n    const errors = await confirmResetPasswordHandler(values, props);\n    if (errors) setErrors(errors);\n  }\n})(ResetPassword));","map":{"version":3,"sources":["/Users/monalisadebnth/Downloads/choped-sm-react/src/components/ResetPassword/ResetPassword.js"],"names":["React","Component","Form","Icon","Input","Spin","Button","Alert","withFormik","yup","connect","queryString","errorMessages","actions","ResetPassword","componentDidMount","props","onSetOobCode","parse","location","search","oobCode","render","values","handleSubmit","handleChange","handleBlur","errors","loading","touched","message","error","formInfos","password","undefined","color","validationSchema","object","shape","string","min","passwordNotLongEnough","max","required","mapStateToProps","state","auth","mapDispatchToProps","dispatch","setOobCode","onConfirmResetPassword","resetPassword","confirmResetPasswordHandler","formValues","mapPropsToValues","setErrors"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form, Icon, Input, Spin, Button, Alert } from \"antd\";\r\nimport { withFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport queryString from \"query-string\";\r\n\r\nimport * as errorMessages from \"../../utils/errorMessages\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nimport \"./ResetPassword.css\";\r\n\r\nexport class ResetPassword extends Component {\r\n  componentDidMount() {\r\n    this.props.onSetOobCode(\r\n      queryString.parse(this.props.location.search).oobCode\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      values,\r\n      handleSubmit,\r\n      handleChange,\r\n      handleBlur,\r\n      errors,\r\n      loading,\r\n      touched,\r\n      message,\r\n      error\r\n    } = this.props;\r\n\r\n    //login errors\r\n    let formInfos = null;\r\n    if (error)\r\n      formInfos = <Alert message={error.message} type=\"error\" showIcon />;\r\n    if (message)\r\n      formInfos = <Alert message={message} type=\"success\" showIcon />;\r\n\r\n    return (\r\n      <form className=\"ResetPassword\" onSubmit={handleSubmit}>\r\n        <div className=\"ResetPassword_Form\">\r\n          <Spin spinning={loading} className=\"Spinner\">\r\n            <h3 className=\"Form_Header\">Enter New Password</h3>\r\n            {formInfos}\r\n            <Form.Item\r\n              help={touched.password && errors.password ? errors.password : \"\"}\r\n              validateStatus={\r\n                touched.password && errors.password ? \"error\" : undefined\r\n              }\r\n            >\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                placeholder=\"New Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.password}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Confirm\r\n              </Button>\r\n            </Form.Item>\r\n          </Spin>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//Password validation schema\r\nconst validationSchema = yup.object().shape({\r\n  password: yup\r\n    .string()\r\n    .min(6, errorMessages.passwordNotLongEnough)\r\n    .max(255)\r\n    .required()\r\n});\r\n\r\n//mapping state to props\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    oobCode: state.auth.oobCode,\r\n    message: state.auth.message,\r\n    error: state.auth.error\r\n  };\r\n};\r\n\r\n//mapping actions to props\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSetOobCode: oobCode => {\r\n      dispatch(actions.setOobCode(oobCode));\r\n    },\r\n    onConfirmResetPassword: (password, oobCode) =>\r\n      dispatch(actions.resetPassword(password, oobCode))\r\n  };\r\n};\r\n\r\n//handling form submit\r\nconst confirmResetPasswordHandler = (formValues, props) => {\r\n  props.onConfirmResetPassword(formValues, props.oobCode);\r\n};\r\n\r\n//export component\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  withFormik({\r\n    validationSchema,\r\n    mapPropsToValues: () => ({\r\n      password: \"\"\r\n    }),\r\n    handleSubmit: async (values, { props, setErrors }) => {\r\n      const errors = await confirmResetPasswordHandler(values, props);\r\n      if (errors) setErrors(errors);\r\n    }\r\n  })(ResetPassword)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}