{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport * as endpoints from \"../../utils/endpoints\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = ({\n  idToken,\n  localId\n}) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken,\n    localId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error\n  };\n};\nexport const dismissError = () => {\n  return {\n    type: actionTypes.AUTH_DISMISS_ERROR\n  };\n};\nexport const logout = () => {\n  //remove stored properties from local storage\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nconst checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const auth = (email, password) => {\n  return async dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n\n    try {\n      const response = await axios.post(endpoints.signin, authData); //Store token, userId and token expiration date in local storage\n\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", response.data.localId); //dispatch actions\n\n      dispatch(authSuccess(response.data));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    } catch (error) {\n      dispatch(authFail(error.response.data.error));\n    }\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem(\"userId\");\n        dispatch(authSuccess({\n          idToken: token,\n          localId: userId\n        }));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const resetPasswordSuccess = (email, message) => {\n  return {\n    type: actionTypes.AUTH_RESET_SUCCESS,\n    email,\n    message\n  };\n}; //send reset password link\n\nexport const sendResetPasswordEmail = ({\n  email\n}) => {\n  return async dispatch => {\n    dispatch(authStart());\n\n    try {\n      const resetData = {\n        email: email,\n        requestType: \"PASSWORD_RESET\"\n      };\n      const response = await axios.post(endpoints.resetPassword, resetData); //dispatch actions\n\n      dispatch(resetPasswordSuccess(response.data.email, \"Reset password instructions were sent to\"));\n    } catch (error) {\n      dispatch(authFail(error.response.data.error));\n    }\n  };\n}; //verify oobCode\n\nexport const setOobCode = oobCode => {\n  return {\n    type: actionTypes.AUTH_SET_OOBCODE,\n    oobCode\n  };\n}; //reset password\n\nexport const resetPassword = ({\n  password\n}, oobCode) => {\n  return async dispatch => {\n    dispatch(authStart());\n\n    try {\n      const resetData = {\n        newPassword: password,\n        oobCode\n      };\n      const response = await axios.post(endpoints.confirmResetPassword, resetData); //dispatch actions\n\n      dispatch(resetPasswordSuccess(response.data.email, \"Password have been reset for email\"));\n    } catch (error) {\n      dispatch(authFail(error.response.data.error));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/monalisadebnth/Downloads/choped-sm-react/src/store/actions/auth.js"],"names":["actionTypes","endpoints","axios","authStart","type","AUTH_START","authSuccess","idToken","localId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","dismissError","AUTH_DISMISS_ERROR","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","authData","returnSecureToken","response","post","signin","expirationDate","Date","getTime","data","expiresIn","setItem","authCheckState","token","getItem","userId","resetPasswordSuccess","message","AUTH_RESET_SUCCESS","sendResetPasswordEmail","resetData","requestType","resetPassword","setOobCode","oobCode","AUTH_SET_OOBCODE","newPassword","confirmResetPassword"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAO,KAAKC,SAAZ,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WAAW,CAACK;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AACnD,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,WAAW,CAACS,YADb;AAELF,IAAAA,OAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAME,QAAQ,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLP,IAAAA,IAAI,EAAEJ,WAAW,CAACY,SADb;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAO;AACLT,IAAAA,IAAI,EAAEJ,WAAW,CAACc;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,MAAM,GAAG,MAAM;AAC1B;AACAC,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,QAAxB;AACA,SAAO;AACLb,IAAAA,IAAI,EAAEJ,WAAW,CAACkB;AADb,GAAP;AAGD,CARM;;AAUP,MAAMC,gBAAgB,GAAGC,cAAc,IAAI;AACzC,SAAOC,QAAQ,IAAI;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACD,KAFS,EAEPK,cAAc,GAAG,IAFV,CAAV;AAGD,GAJD;AAKD,CAND;;AAQA,OAAO,MAAMG,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACvC,SAAO,MAAMJ,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAClB,SAAS,EAAV,CAAR;AACA,UAAMuB,QAAQ,GAAG;AAAEF,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBE,MAAAA,iBAAiB,EAAE;AAAtC,KAAjB;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAN,CAAW5B,SAAS,CAAC6B,MAArB,EAA6BJ,QAA7B,CAAvB,CADE,CAGF;;AACA,YAAMK,cAAc,GAAG,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBL,QAAQ,CAACM,IAAT,CAAcC,SAAd,GAA0B,IAD5B,CAAvB;AAGAnB,MAAAA,YAAY,CAACoB,OAAb,CAAqB,OAArB,EAA8BR,QAAQ,CAACM,IAAT,CAAc3B,OAA5C;AACAS,MAAAA,YAAY,CAACoB,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACAf,MAAAA,YAAY,CAACoB,OAAb,CAAqB,QAArB,EAA+BR,QAAQ,CAACM,IAAT,CAAc1B,OAA7C,EATE,CAWF;;AACAa,MAAAA,QAAQ,CAACf,WAAW,CAACsB,QAAQ,CAACM,IAAV,CAAZ,CAAR;AACAb,MAAAA,QAAQ,CAACF,gBAAgB,CAACS,QAAQ,CAACM,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACD,KAdD,CAcE,OAAOxB,KAAP,EAAc;AACdU,MAAAA,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACiB,QAAN,CAAeM,IAAf,CAAoBvB,KAArB,CAAT,CAAR;AACD;AACF,GArBD;AAsBD,CAvBM;AAyBP,OAAO,MAAM0B,cAAc,GAAG,MAAM;AAClC,SAAOhB,QAAQ,IAAI;AACjB,UAAMiB,KAAK,GAAGtB,YAAY,CAACuB,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACVjB,MAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACD,KAFD,MAEO;AACL,YAAMgB,cAAc,GAAG,IAAIC,IAAJ,CAAShB,YAAY,CAACuB,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAIR,cAAc,IAAI,IAAIC,IAAJ,EAAtB,EAAkC;AAChCX,QAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACD,OAFD,MAEO;AACL,cAAMyB,MAAM,GAAGxB,YAAY,CAACuB,OAAb,CAAqB,QAArB,CAAf;AACAlB,QAAAA,QAAQ,CAACf,WAAW,CAAC;AAACC,UAAAA,OAAO,EAAE+B,KAAV;AAAiB9B,UAAAA,OAAO,EAAEgC;AAA1B,SAAD,CAAZ,CAAR;AACAnB,QAAAA,QAAQ,CACNF,gBAAgB,CACd,CAACY,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IADtC,CADV,CAAR;AAKD;AACF;AACF,GAlBD;AAmBD,CApBM;AAuBP,OAAO,MAAMQ,oBAAoB,GAAG,CAACjB,KAAD,EAAQkB,OAAR,KAAoB;AACpD,SAAO;AACLtC,IAAAA,IAAI,EAAEJ,WAAW,CAAC2C,kBADb;AAELnB,IAAAA,KAFK;AAGLkB,IAAAA;AAHK,GAAP;AAKH,CANM,C,CASP;;AACA,OAAO,MAAME,sBAAsB,GAAG,CAAC;AAACpB,EAAAA;AAAD,CAAD,KAAa;AAEjD,SAAO,MAAMH,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAClB,SAAS,EAAV,CAAR;;AACA,QAAI;AACF,YAAM0C,SAAS,GAAG;AAAErB,QAAAA,KAAK,EAAEA,KAAT;AAAgBsB,QAAAA,WAAW,EAAE;AAA7B,OAAlB;AACA,YAAMlB,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAN,CAAW5B,SAAS,CAAC8C,aAArB,EAAoCF,SAApC,CAAvB,CAFE,CAGF;;AACAxB,MAAAA,QAAQ,CACNoB,oBAAoB,CAClBb,QAAQ,CAACM,IAAT,CAAcV,KADI,EAElB,0CAFkB,CADd,CAAR;AAMD,KAVD,CAUE,OAAOb,KAAP,EAAc;AACdU,MAAAA,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACiB,QAAN,CAAeM,IAAf,CAAoBvB,KAArB,CAAT,CAAR;AACD;AACF,GAfD;AAgBD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMqC,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO;AACL7C,IAAAA,IAAI,EAAEJ,WAAW,CAACkD,gBADb;AAELD,IAAAA;AAFK,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMF,aAAa,GAAG,CAAC;AAACtB,EAAAA;AAAD,CAAD,EAAawB,OAAb,KAAyB;AACpD,SAAO,MAAM5B,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAClB,SAAS,EAAV,CAAR;;AACA,QAAI;AACF,YAAM0C,SAAS,GAAG;AAAEM,QAAAA,WAAW,EAAE1B,QAAf;AAAyBwB,QAAAA;AAAzB,OAAlB;AACA,YAAMrB,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAN,CACrB5B,SAAS,CAACmD,oBADW,EAErBP,SAFqB,CAAvB,CAFE,CAMF;;AACAxB,MAAAA,QAAQ,CACNoB,oBAAoB,CAClBb,QAAQ,CAACM,IAAT,CAAcV,KADI,EAElB,oCAFkB,CADd,CAAR;AAMD,KAbD,CAaE,OAAOb,KAAP,EAAc;AACdU,MAAAA,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACiB,QAAN,CAAeM,IAAf,CAAoBvB,KAArB,CAAT,CAAR;AACD;AACF,GAlBD;AAmBD,CApBM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport * as endpoints from \"../../utils/endpoints\";\r\nimport axios from \"axios\";\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START\r\n  };\r\n};\r\n\r\nexport const authSuccess = ({ idToken, localId }) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    idToken,\r\n    localId\r\n  };\r\n};\r\n\r\nexport const authFail = error => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error\r\n  };\r\n};\r\n\r\nexport const dismissError = () => {\r\n  return {\r\n    type: actionTypes.AUTH_DISMISS_ERROR,\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  //remove stored properties from local storage\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"expirationDate\");\r\n  localStorage.removeItem(\"userId\");\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT\r\n  };\r\n};\r\n\r\nconst checkAuthTimeout = expirationTime => {\r\n  return dispatch => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationTime * 1000);\r\n  };\r\n};\r\n\r\nexport const auth = (email, password) => {\r\n  return async dispatch => {\r\n    dispatch(authStart());\r\n    const authData = { email, password, returnSecureToken: true };\r\n\r\n    try {\r\n      const response = await axios.post(endpoints.signin, authData);\r\n\r\n      //Store token, userId and token expiration date in local storage\r\n      const expirationDate = new Date(\r\n        new Date().getTime() + response.data.expiresIn * 1000\r\n      );\r\n      localStorage.setItem(\"token\", response.data.idToken);\r\n      localStorage.setItem(\"expirationDate\", expirationDate);\r\n      localStorage.setItem(\"userId\", response.data.localId);\r\n\r\n      //dispatch actions\r\n      dispatch(authSuccess(response.data));\r\n      dispatch(checkAuthTimeout(response.data.expiresIn));\r\n    } catch (error) {\r\n      dispatch(authFail(error.response.data.error));\r\n    }\r\n  };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return dispatch => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        dispatch(authSuccess({idToken: token, localId: userId}));\r\n        dispatch(\r\n          checkAuthTimeout(\r\n            (expirationDate.getTime() - new Date().getTime()) / 1000\r\n          )\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const resetPasswordSuccess = (email, message) => {\r\n    return {\r\n      type: actionTypes.AUTH_RESET_SUCCESS,\r\n      email,\r\n      message\r\n    };\r\n};\r\n\r\n\r\n//send reset password link\r\nexport const sendResetPasswordEmail = ({email}) => {\r\n  \r\n  return async dispatch => {\r\n    dispatch(authStart());\r\n    try {\r\n      const resetData = { email: email, requestType: \"PASSWORD_RESET\" };\r\n      const response = await axios.post(endpoints.resetPassword, resetData);\r\n      //dispatch actions\r\n      dispatch(\r\n        resetPasswordSuccess(\r\n          response.data.email,\r\n          \"Reset password instructions were sent to\"\r\n        )\r\n      );\r\n    } catch (error) {\r\n      dispatch(authFail(error.response.data.error));\r\n    }\r\n  };\r\n};\r\n\r\n//verify oobCode\r\nexport const setOobCode = oobCode => {\r\n  return {\r\n    type: actionTypes.AUTH_SET_OOBCODE,\r\n    oobCode\r\n  };\r\n};\r\n\r\n//reset password\r\nexport const resetPassword = ({password}, oobCode) => { \r\n  return async dispatch => {\r\n    dispatch(authStart());\r\n    try {\r\n      const resetData = { newPassword: password, oobCode };\r\n      const response = await axios.post(\r\n        endpoints.confirmResetPassword,\r\n        resetData\r\n      );\r\n      //dispatch actions\r\n      dispatch(\r\n        resetPasswordSuccess(\r\n          response.data.email,\r\n          \"Password have been reset for email\"\r\n        )\r\n      );\r\n    } catch (error) {\r\n      dispatch(authFail(error.response.data.error));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}